version: '2'

services:

  etcd:
    image: quay.io/coreos/etcd:v3.1.5
    restart: on-failure
    command: 
    - /usr/local/bin/etcd
    - --name=etcd0
    - --advertise-client-urls=http://127.0.0.1:2379
    - --listen-client-urls=http://0.0.0.0:2379
    - --initial-advertise-peer-urls=http://127.0.0.1:2380
    - --listen-peer-urls=http://0.0.0.0:2380
    - --initial-cluster-token=etcd-cluster-1
    - --initial-cluster-state=new
    ports:
    - 4001:4001
    - 2380:2380
    - 2379:2379
    
  apiserver:
    image: gcr.io/google_containers/hyperkube:v1.6.4
    restart: on-failure
    command:
    - /hyperkube
    - apiserver
    - --insecure-bind-address=0.0.0.0
    - --service-cluster-ip-range=10.10.0.0/16
    - --etcd-servers=http://etcd:2379
    - --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota
    - --tls-cert-file=/etc/kubernetes/ssl/apiserver.pem
    - --tls-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem
    - --client-ca-file=/etc/kubernetes/ssl/ca.pem
    - --service-account-key-file=/etc/kubernetes/ssl/apiserver-key.pem
    - --v=1
    ports:
    - 8080:8080
    - 443:6443
    volumes:
    - ${project.build.directory}/test-classes/kubernetes-ssl:/etc/kubernetes/ssl:ro
    
  scheduler:
    image: gcr.io/google_containers/hyperkube:v1.6.4
    restart: on-failure
    command:
    - /hyperkube
    - scheduler
    - --leader-elect=true
    - --master=http://apiserver:8080
    - --v=1

  controller-manager:
    image: gcr.io/google_containers/hyperkube:v1.6.4
    restart: on-failure
    command:
    - /hyperkube
    - controller-manager
    - --master=http://apiserver:8080
    - --leader-elect=true
    - --root-ca-file=/etc/kubernetes/ssl/ca.pem
    - --service-account-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem
    - --v=1
    volumes:
    - ${project.build.directory}/test-classes/kubernetes-ssl:/etc/kubernetes/ssl:ro
    
  kubelet:
    image: gcr.io/google_containers/hyperkube:v1.6.4
    restart: on-failure
    command:
    - /hyperkube
    - kubelet
    - --containerized
    - --allow-privileged=true
    - --api-servers=http://apiserver:8080
    - --cluster-dns=10.10.0.2
    - --cluster-domain=cluster.local
    - --container-runtime=docker
    - --cgroups-per-qos=false
    - --enforce-node-allocatable=
    - --v=1
    volumes:
    - /:/rootfs:ro
    - /sys:/sys:ro
    - /var/run:/var/run:rw
    - /var/lib/docker/:/var/lib/docker:rw
    - /var/lib/kubelet:/var/lib/kubelet:rw
    - /dev:/dev
    privileged: true
